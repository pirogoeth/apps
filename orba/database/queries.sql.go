// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createMemory = `-- name: CreateMemory :one
insert into memories (
  source_id, user_id, memory
) values (?, ?, ?)
returning id, user_id, source_id, created_at, created_date, memory
`

type CreateMemoryParams struct {
	SourceID string `json:"source_id"`
	UserID   int64  `json:"user_id"`
	Memory   string `json:"memory"`
}

func (q *Queries) CreateMemory(ctx context.Context, arg CreateMemoryParams) (Memory, error) {
	row := q.db.QueryRowContext(ctx, createMemory, arg.SourceID, arg.UserID, arg.Memory)
	var i Memory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SourceID,
		&i.CreatedAt,
		&i.CreatedDate,
		&i.Memory,
	)
	return i, err
}

const createSource = `-- name: CreateSource :one
insert into sources (
  id, user_id, description, protected
) values (?, ?, ?, ?)
returning id, user_id, description, protected
`

type CreateSourceParams struct {
	ID          string         `json:"id"`
	UserID      int64          `json:"user_id"`
	Description sql.NullString `json:"description"`
	Protected   sql.NullBool   `json:"protected"`
}

func (q *Queries) CreateSource(ctx context.Context, arg CreateSourceParams) (Source, error) {
	row := q.db.QueryRowContext(ctx, createSource,
		arg.ID,
		arg.UserID,
		arg.Description,
		arg.Protected,
	)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Protected,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (name) values (?) returning id, name, created_at, created_date
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedDate,
	)
	return i, err
}

const deleteMemoryById = `-- name: DeleteMemoryById :exec
delete from memories where id=?
`

func (q *Queries) DeleteMemoryById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMemoryById, id)
	return err
}

const getRelevantMemoriesForToday = `-- name: GetRelevantMemoriesForToday :many
select id, user_id, source_id, created_at, created_date, memory from memories
where
  created_date=date('now')
  and user_id=?
order by created_at desc
`

func (q *Queries) GetRelevantMemoriesForToday(ctx context.Context, userID int64) ([]Memory, error) {
	rows, err := q.db.QueryContext(ctx, getRelevantMemoriesForToday, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memory
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SourceID,
			&i.CreatedAt,
			&i.CreatedDate,
			&i.Memory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
select id, name, created_at, created_date from users where id=?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedDate,
	)
	return i, err
}

const listMemories = `-- name: ListMemories :many
select id, user_id, source_id, created_at, created_date, memory from memories
where user_id=?
order by created_at desc
`

func (q *Queries) ListMemories(ctx context.Context, userID int64) ([]Memory, error) {
	rows, err := q.db.QueryContext(ctx, listMemories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memory
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SourceID,
			&i.CreatedAt,
			&i.CreatedDate,
			&i.Memory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSourcesForUser = `-- name: ListSourcesForUser :many
select id, user_id, description, protected from sources where user_id=?
`

func (q *Queries) ListSourcesForUser(ctx context.Context, userID int64) ([]Source, error) {
	rows, err := q.db.QueryContext(ctx, listSourcesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Source
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Protected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const protectSource = `-- name: ProtectSource :exec
update sources
set protected=true
where id=?
`

func (q *Queries) ProtectSource(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, protectSource, id)
	return err
}

const unprotectSource = `-- name: UnprotectSource :exec
update sources
set protected=false
where id=?
`

func (q *Queries) UnprotectSource(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, unprotectSource, id)
	return err
}
