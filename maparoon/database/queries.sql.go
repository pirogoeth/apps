// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createNetwork = `-- name: CreateNetwork :one
insert into networks (
    name, address, cidr, comments
) values (
    ?, ?, ?, ?
)
returning id, name, address, cidr, comments, attributes
`

type CreateNetworkParams struct {
	Name     interface{}    `json:"name"`
	Address  interface{}    `json:"address"`
	Cidr     int64          `json:"cidr"`
	Comments sql.NullString `json:"comments"`
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRowContext(ctx, createNetwork,
		arg.Name,
		arg.Address,
		arg.Cidr,
		arg.Comments,
	)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Cidr,
		&i.Comments,
		&i.Attributes,
	)
	return i, err
}

const deleteNetwork = `-- name: DeleteNetwork :exec
delete from networks
where id=? limit 1
`

func (q *Queries) DeleteNetwork(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNetwork, id)
	return err
}

const getNetworkByAddress = `-- name: GetNetworkByAddress :one
select id, name, address, cidr, comments, attributes from networks
where address=? limit 1
`

func (q *Queries) GetNetworkByAddress(ctx context.Context, address interface{}) (Network, error) {
	row := q.db.QueryRowContext(ctx, getNetworkByAddress, address)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Cidr,
		&i.Comments,
		&i.Attributes,
	)
	return i, err
}

const getNetworkById = `-- name: GetNetworkById :one
select id, name, address, cidr, comments, attributes from networks
where id=? limit 1
`

func (q *Queries) GetNetworkById(ctx context.Context, id int64) (Network, error) {
	row := q.db.QueryRowContext(ctx, getNetworkById, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Cidr,
		&i.Comments,
		&i.Attributes,
	)
	return i, err
}

const listNetworks = `-- name: ListNetworks :many
select id, name, address, cidr, comments, attributes from networks
`

func (q *Queries) ListNetworks(ctx context.Context) ([]Network, error) {
	rows, err := q.db.QueryContext(ctx, listNetworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Network
	for rows.Next() {
		var i Network
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Cidr,
			&i.Comments,
			&i.Attributes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
