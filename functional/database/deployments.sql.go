// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deployments.sql

package database

import (
	"context"
	"database/sql"
)

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO deployments (
    id, function_id, provider, resource_id, status, replicas, image_tag
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at
`

type CreateDeploymentParams struct {
	ID         string         `db:"id" json:"id"`
	FunctionID string         `db:"function_id" json:"function_id"`
	Provider   string         `db:"provider" json:"provider"`
	ResourceID string         `db:"resource_id" json:"resource_id"`
	Status     string         `db:"status" json:"status"`
	Replicas   int64          `db:"replicas" json:"replicas"`
	ImageTag   sql.NullString `db:"image_tag" json:"image_tag"`
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, createDeployment,
		arg.ID,
		arg.FunctionID,
		arg.Provider,
		arg.ResourceID,
		arg.Status,
		arg.Replicas,
		arg.ImageTag,
	)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.FunctionID,
		&i.Provider,
		&i.ResourceID,
		&i.Status,
		&i.Replicas,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDeployment = `-- name: DeleteDeployment :exec
DELETE FROM deployments WHERE id = ?
`

func (q *Queries) DeleteDeployment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDeployment, id)
	return err
}

const getActiveDeploymentByFunction = `-- name: GetActiveDeploymentByFunction :one
SELECT id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at FROM deployments 
WHERE function_id = ? AND status = 'active' 
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetActiveDeploymentByFunction(ctx context.Context, functionID string) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, getActiveDeploymentByFunction, functionID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.FunctionID,
		&i.Provider,
		&i.ResourceID,
		&i.Status,
		&i.Replicas,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeployment = `-- name: GetDeployment :one
SELECT id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at FROM deployments WHERE id = ?
`

func (q *Queries) GetDeployment(ctx context.Context, id string) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, getDeployment, id)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.FunctionID,
		&i.Provider,
		&i.ResourceID,
		&i.Status,
		&i.Replicas,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeploymentsByFunction = `-- name: GetDeploymentsByFunction :many
SELECT id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at FROM deployments WHERE function_id = ? ORDER BY created_at DESC
`

func (q *Queries) GetDeploymentsByFunction(ctx context.Context, functionID string) ([]Deployment, error) {
	rows, err := q.db.QueryContext(ctx, getDeploymentsByFunction, functionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deployment{}
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.FunctionID,
			&i.Provider,
			&i.ResourceID,
			&i.Status,
			&i.Replicas,
			&i.ImageTag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeploymentReplicas = `-- name: UpdateDeploymentReplicas :one
UPDATE deployments 
SET 
    replicas = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at
`

type UpdateDeploymentReplicasParams struct {
	Replicas int64  `db:"replicas" json:"replicas"`
	ID       string `db:"id" json:"id"`
}

func (q *Queries) UpdateDeploymentReplicas(ctx context.Context, arg UpdateDeploymentReplicasParams) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, updateDeploymentReplicas, arg.Replicas, arg.ID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.FunctionID,
		&i.Provider,
		&i.ResourceID,
		&i.Status,
		&i.Replicas,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeploymentStatus = `-- name: UpdateDeploymentStatus :one
UPDATE deployments 
SET 
    status = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, function_id, provider, resource_id, status, replicas, image_tag, created_at, updated_at
`

type UpdateDeploymentStatusParams struct {
	Status string `db:"status" json:"status"`
	ID     string `db:"id" json:"id"`
}

func (q *Queries) UpdateDeploymentStatus(ctx context.Context, arg UpdateDeploymentStatusParams) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, updateDeploymentStatus, arg.Status, arg.ID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.FunctionID,
		&i.Provider,
		&i.ResourceID,
		&i.Status,
		&i.Replicas,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
