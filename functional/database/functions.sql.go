// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: functions.sql

package database

import (
	"context"
	"database/sql"
)

const createFunction = `-- name: CreateFunction :one
INSERT INTO functions (
    id, name, description, code_path, runtime, handler, 
    timeout_seconds, memory_mb, env_vars
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, name, description, code_path, runtime, handler, timeout_seconds, memory_mb, env_vars, created_at, updated_at
`

type CreateFunctionParams struct {
	ID             string         `db:"id" json:"id"`
	Name           string         `db:"name" json:"name"`
	Description    sql.NullString `db:"description" json:"description"`
	CodePath       string         `db:"code_path" json:"code_path"`
	Runtime        string         `db:"runtime" json:"runtime"`
	Handler        string         `db:"handler" json:"handler"`
	TimeoutSeconds int64          `db:"timeout_seconds" json:"timeout_seconds"`
	MemoryMb       int64          `db:"memory_mb" json:"memory_mb"`
	EnvVars        sql.NullString `db:"env_vars" json:"env_vars"`
}

func (q *Queries) CreateFunction(ctx context.Context, arg CreateFunctionParams) (Function, error) {
	row := q.db.QueryRowContext(ctx, createFunction,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CodePath,
		arg.Runtime,
		arg.Handler,
		arg.TimeoutSeconds,
		arg.MemoryMb,
		arg.EnvVars,
	)
	var i Function
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CodePath,
		&i.Runtime,
		&i.Handler,
		&i.TimeoutSeconds,
		&i.MemoryMb,
		&i.EnvVars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFunction = `-- name: DeleteFunction :exec
DELETE FROM functions WHERE id = ?
`

func (q *Queries) DeleteFunction(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFunction, id)
	return err
}

const getFunction = `-- name: GetFunction :one
SELECT id, name, description, code_path, runtime, handler, timeout_seconds, memory_mb, env_vars, created_at, updated_at FROM functions WHERE id = ?
`

func (q *Queries) GetFunction(ctx context.Context, id string) (Function, error) {
	row := q.db.QueryRowContext(ctx, getFunction, id)
	var i Function
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CodePath,
		&i.Runtime,
		&i.Handler,
		&i.TimeoutSeconds,
		&i.MemoryMb,
		&i.EnvVars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFunctionByName = `-- name: GetFunctionByName :one
SELECT id, name, description, code_path, runtime, handler, timeout_seconds, memory_mb, env_vars, created_at, updated_at FROM functions WHERE name = ?
`

func (q *Queries) GetFunctionByName(ctx context.Context, name string) (Function, error) {
	row := q.db.QueryRowContext(ctx, getFunctionByName, name)
	var i Function
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CodePath,
		&i.Runtime,
		&i.Handler,
		&i.TimeoutSeconds,
		&i.MemoryMb,
		&i.EnvVars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFunctions = `-- name: ListFunctions :many
SELECT id, name, description, code_path, runtime, handler, timeout_seconds, memory_mb, env_vars, created_at, updated_at FROM functions ORDER BY created_at DESC
`

func (q *Queries) ListFunctions(ctx context.Context) ([]Function, error) {
	rows, err := q.db.QueryContext(ctx, listFunctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Function{}
	for rows.Next() {
		var i Function
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CodePath,
			&i.Runtime,
			&i.Handler,
			&i.TimeoutSeconds,
			&i.MemoryMb,
			&i.EnvVars,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFunction = `-- name: UpdateFunction :one
UPDATE functions 
SET 
    description = ?,
    code_path = ?,
    runtime = ?,
    handler = ?,
    timeout_seconds = ?,
    memory_mb = ?,
    env_vars = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, description, code_path, runtime, handler, timeout_seconds, memory_mb, env_vars, created_at, updated_at
`

type UpdateFunctionParams struct {
	Description    sql.NullString `db:"description" json:"description"`
	CodePath       string         `db:"code_path" json:"code_path"`
	Runtime        string         `db:"runtime" json:"runtime"`
	Handler        string         `db:"handler" json:"handler"`
	TimeoutSeconds int64          `db:"timeout_seconds" json:"timeout_seconds"`
	MemoryMb       int64          `db:"memory_mb" json:"memory_mb"`
	EnvVars        sql.NullString `db:"env_vars" json:"env_vars"`
	ID             string         `db:"id" json:"id"`
}

func (q *Queries) UpdateFunction(ctx context.Context, arg UpdateFunctionParams) (Function, error) {
	row := q.db.QueryRowContext(ctx, updateFunction,
		arg.Description,
		arg.CodePath,
		arg.Runtime,
		arg.Handler,
		arg.TimeoutSeconds,
		arg.MemoryMb,
		arg.EnvVars,
		arg.ID,
	)
	var i Function
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CodePath,
		&i.Runtime,
		&i.Handler,
		&i.TimeoutSeconds,
		&i.MemoryMb,
		&i.EnvVars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
